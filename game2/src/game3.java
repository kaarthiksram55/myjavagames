import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Subramaniam V
 */
public class game3 extends javax.swing.JFrame implements Runnable{

// for ball:
    int y;
    int x;
    Random h = new Random(), i = new Random();
    int[] xx = {-4,-3,-2,-1,1,2,3,4};
    int xx1 = h.nextInt(8)+0;
    int x1 = xx[xx1], y1 = 1;   
    int x2=x1, y2=y1;
    
//for paddle and bricks:
    int xs,ys;
    int s1;
    int p1x,p1y;
    int b1x,b2x,b3x,b4x,b5x;
    int b1y,b2y,b3y,b4y,b5y;
    int m1x,m2x,m3x;
    int m1y,m2y,m3y;
    int xdirection;
    int wx,wy;
    
//other uses:
    int count;
    int life;
    int score;
    int level;
    int speed;
    Color color;
    String name;
    
    public void move(){  
        xs+=(xdirection/2);
        if(xs<=5){
            xs=5;
        }
        if(xs+s1>=470){
            xs=470-s1;
        }
    }
   
    public void setXdirection(int xdir){
        xdirection = xdir;
    }
    
    public void run(){
        try{
            while(true){
                move();
                Thread.sleep(5);
            }
        }
        catch(Exception e){
            e.getMessage();
        }
    }
    /**
     * Creates new form game3
     */
    public game3() {
        initComponents();
        b2.grabFocus();
        setSize(500,600);
        bgl3.setIcon(new ImageIcon("C:\\Users\\User\\Desktop\\download (1)1.jpg"));
        setVisible(true);
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        System.out.println(bgl3.getWidth()+"   "+bgl3.getHeight());
        x = 225-( (b1.getWidth())/2 );y = 11;
        xs = 225-( (b2.getWidth())/2 );ys = 11;
        s1 = 45;
        p1x = 200;p1y = 380;       
        count = 0;
        life = 3;
        score = 0;
        level = 1; 
        speed = 10;
        
        bb1.setBorder(null);
        bb2.setBorder(null);
        bb3.setBorder(null);
        bb4.setBorder(null);
        bb5.setBorder(null);
        bb1.setOpaque(true);
        bb2.setOpaque(true);
        bb3.setOpaque(true);
        bb4.setOpaque(true);
        bb5.setOpaque(true);
        
        t1.setLocation(20,550);
        t1.setSize(200,30);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        bb2 = new javax.swing.JButton();
        bb1 = new javax.swing.JButton();
        bb3 = new javax.swing.JButton();
        bb4 = new javax.swing.JButton();
        bb5 = new javax.swing.JButton();
        pu1 = new javax.swing.JButton();
        t1 = new javax.swing.JTextField();
        reset = new javax.swing.JButton();
        wall = new javax.swing.JSeparator();
        m1 = new javax.swing.JButton();
        m2 = new javax.swing.JButton();
        m3 = new javax.swing.JButton();
        bgl3 = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        b1.setText("jButton1");
        getContentPane().add(b1);
        b1.setBounds(250, 34, 10, 10);

        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });
        b2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                b2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                b2KeyReleased(evt);
            }
        });
        getContentPane().add(b2);
        b2.setBounds(184, 11, 54, 12);

        bb2.setBackground(new java.awt.Color(255, 0, 0));
        bb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bb2ActionPerformed(evt);
            }
        });
        getContentPane().add(bb2);
        bb2.setBounds(110, 321, 92, 23);

        bb1.setBackground(new java.awt.Color(255, 0, 0));
        getContentPane().add(bb1);
        bb1.setBounds(10, 321, 94, 23);

        bb3.setBackground(new java.awt.Color(255, 0, 0));
        getContentPane().add(bb3);
        bb3.setBounds(208, 321, 91, 23);

        bb4.setBackground(new java.awt.Color(255, 0, 0));
        getContentPane().add(bb4);
        bb4.setBounds(305, 321, 90, 23);

        bb5.setBackground(new java.awt.Color(255, 0, 0));
        getContentPane().add(bb5);
        bb5.setBounds(401, 321, 90, 23);

        pu1.setText("jButton1");
        pu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pu1ActionPerformed(evt);
            }
        });
        getContentPane().add(pu1);
        pu1.setBounds(237, 321, 32, 7);

        t1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t1ActionPerformed(evt);
            }
        });
        getContentPane().add(t1);
        t1.setBounds(20, 530, 217, 20);

        reset.setText("reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        getContentPane().add(reset);
        reset.setBounds(370, 530, 109, 23);

        wall.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(wall);
        wall.setBounds(0, 495, 501, 10);

        m1.setBackground(new java.awt.Color(0, 0, 255));
        m1.setForeground(new java.awt.Color(0, 0, 255));
        getContentPane().add(m1);
        m1.setBounds(70, 195, 73, 30);

        m2.setBackground(new java.awt.Color(0, 0, 255));
        getContentPane().add(m2);
        m2.setBounds(208, 128, 73, 30);

        m3.setBackground(new java.awt.Color(0, 0, 255));
        m3.setForeground(new java.awt.Color(0, 0, 255));
        getContentPane().add(m3);
        m3.setBounds(348, 195, 73, 30);
        getContentPane().add(bgl3);
        bgl3.setBounds(0, -190, 500, 870);

        pack();
    }// </editor-fold>//GEN-END:initComponents

ActionListener action;   
Timer t;
    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        // TODO add your handling code here:       
        
        bb1.setVisible(true);
        bb2.setVisible(true);
        bb3.setVisible(true);
        bb4.setVisible(true);
        bb5.setVisible(true);
        
        
        action = new ActionListener() {
                       
             @Override
            public void actionPerformed(ActionEvent e) {                              
                b1.setLocation(x,y);
                x+=x2;
                y+=y2;                              
                b1x = 10;
                b2x = b1x+bb1.getWidth()+5;
                b3x = b2x+bb2.getWidth()+5;
                b4x = b3x+bb3.getWidth()+5;
                b5x = b4x+bb4.getWidth()+5;
                b1y=380;b2y=380;b3y=380;b4y=380;b5y=380;
                wx = 0;wy = 510;
                m1x = 125-(m1.getWidth()/2);m2x = 250-(m2.getWidth()/2);m3x = 375-(m3.getWidth()/2);
                m1y = 280;m2y = 230;m3y = 280;
                
                bb1.setLocation(b1x,b1y);
                bb2.setLocation(b2x,b2y);
                bb3.setLocation(b3x,b3y);
                bb4.setLocation(b4x,b4y);      
                bb5.setLocation(b5x,b5y);
                
                wall.setLocation(wx,wy);
                m1.setLocation(m1x,m1y);
                m2.setLocation(m2x,m2y);
                m3.setLocation(m3x,m3y);
                
                             
                if(x<5){
                    if(x1>0)
                        x2=x1;
                    if(x1<0)
                        x2=-x1;
                }
                if(x>=470){
                    if(x1>0)
                        x2=-x1;
                    if(x1<0)
                        x2=x1;
                }                              
                if(y>=500){
                    y2=-y1;
                }     
                if(y<9){                    
                    y1 = 1;
                    xx1 = i.nextInt(8)+0;
                    x1 = xx[xx1];
                    y2 = y1;
                    if(pu1.isVisible()){
                        pu1.setLocation(225,700);
                        pu1.setEnabled(false);
                        pu1.setVisible(false);
                        s1 = 45;
                    }
                    if(life>0){
                        life--;
                        t.stop();
                        s1 = 55;
                        xs = 225;
                        ys = 5;
                        x = xs;
                        y = ys + 20;
                        b1.setLocation(x,y);
                        xs = 225-(s1/2);
                        b2.setLocation(xs,ys);
                        b2.setSize(s1,15);
                        reset.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "lives remaining : "+life);
                    }
                    if(life<=0){
                        t.stop();
                        b2.setEnabled(false);
                        b1.setEnabled(false);
                        reset.setEnabled(true);
                        JOptionPane.showMessageDialog(null, "Game Over!!");
                        t.removeActionListener(action);
                    }
                }
                    
                if( (x>=xs) && (x<=xs+s1) &&  (y<=ys+b2.getHeight()) ){
                    y2=y1;
                    if( (x>=(8*(xs+s1))/9) && (x<=xs+s1)){
                        if(x1>0)
                            x2=x1;
                        if(x1<0)
                            x2=-x1;
                    }
                    if(  (x>=xs) && (x<=(xs+s1)/9) ){
                        if(x1>0)
                            x2=-x1;
                        if(x1<0)
                            x2=x1;
                    }
                }
                
                if(level == 1){   
                    
                    m1.setVisible(false);
                    m2.setVisible(false);
                    m3.setVisible(false);

                    if(bb1.isOpaque()==true){
                        if( ((x>=b1x)&&(x<=b1x+bb1.getWidth())) &&(y+b1.getHeight()>=b1y) &&(y<=b1y+bb1.getHeight()) ){                          
                            if((x>b1x)&&(x<b1x+bb1.getWidth())){
                                if(y2==-y1)
                                    y2=y1;
                                else if(y2==y1)
                                    y2=-y1;     
                            }
                            if((y+b1.getHeight()>b1y-1) &&(y<b1y+bb1.getHeight()+1)){
                                if(x2==x1)
                                    x2=-x1;
                                else if(x2==-x1)
                                    x2=x1;
                            }
                            count++;
                            score+=50;
                                    
                            bb1.setContentAreaFilled(false);
                            bb1.setOpaque(false);                        
                        }                       
                    }
                    if(bb2.isOpaque()==true){
                        if( ((x>=b2x)&&(x<=b2x+bb2.getWidth())) &&(y+b1.getHeight()>=b2y) &&(y<=b2y+bb2.getHeight()) ){
                            if((x>b2x)&&(x<b2x+bb2.getWidth())){
                                if(y2==-y1)
                                    y2=y1;
                                else if(y2==y1)
                                    y2=-y1;     
                            }                           
                            if((y+b1.getHeight()>b2y-1) &&(y<b2y+bb2.getHeight()+1)){
                                if(x2==x1)
                                    x2=-x1;
                                else if(x2==-x1)
                                    x2=x1;
                            }
                            count++;
                            score+=50;   
                                 
                            bb2.setContentAreaFilled(false);
                            bb2.setOpaque(false);
                        }
                        
                    }
                    if(bb3.isOpaque()==true){
                        if( ((x>=b3x)&&(x<=b3x+bb3.getWidth())) &&(y+b1.getHeight()>=b3y)&&(y<=b3y+bb3.getHeight())){ 
                            if((x>b3x)&&(x<b3x+bb3.getWidth())){
                                if(y2==-y1)
                                    y2=y1;
                                else if(y2==y1)
                                    y2=-y1;     
                            }                           
                            if((y+b1.getHeight()>b3y-1) &&(y<b3y+bb3.getHeight()+1)){
                                if(x2==x1)
                                    x2=-x1;
                                else if(x2==-x1)
                                    x2=x1;
                            }                    
                            count++;
                            score+=50;
                            if(count!=5){
                                if(pu1.isVisible()==false){
                                    pu1.doClick();
                                    pu1.setVisible(true);
                                }
                            }                            
                            bb3.setContentAreaFilled(false);
                            bb3.setOpaque(false);
                        }                       
                    }
                    if(bb4.isOpaque()==true){
                        if( ((x>=b4x)&&(x<=b4x+bb4.getWidth())) &&(y+b1.getHeight()>=b4y) &&(y<=b4y+bb4.getHeight()) ){
                            if((x>b4x)&&(x<b4x+bb4.getWidth())){
                                if(y2==-y1)
                                    y2=y1;
                                else if(y2==y1)
                                    y2=-y1;     
                            }                            
                            if((y+b1.getHeight()>b4y-1) &&(y<b4y+bb4.getHeight()+1)){
                                if(x2==x1)
                                    x2=-x1;
                                else if(x2==-x1)
                                    x2=x1;
                            }
                            count++;
                            score+=50;                           
                            bb4.setContentAreaFilled(false);
                            bb4.setOpaque(false);
                        }                       
                    }
                    if(bb5.isOpaque()==true){
                        if( ((x>=b5x)&&(x<=b5x+bb5.getWidth())) &&(y+b1.getHeight()>=b5y) &&(y<=b5y+bb5.getHeight()) ){
                            if((x>b5x)&&(x<b5x+bb5.getWidth())){
                                if(y2==-y1)
                                    y2=y1;
                                else if(y2==y1)
                                    y2=-y1;     
                            } 
                            if((y+b1.getHeight()>b5y-1) &&(y<b5y+bb5.getHeight()+1)){
                                if(x2==x1)
                                    x2=-x1;
                                else if(x2==-x1)
                                    x2=x1;
                            }
                            count++;
                            score+=50;                          
                            bb5.setContentAreaFilled(false);
                            bb5.setOpaque(false);
                        }                        
                    }                   
                }
                
                if(level == 2){
                                           
                    m1.setVisible(false);
                    m2.setVisible(false);
                    m3.setVisible(false);
                                                                              
                    if(bb1.isOpaque()==true){                                     
                        if( ((x>=b1x)&&(x<=b1x+bb1.getWidth())) &&(y+b1.getHeight()>=b1y) &&(y<=b1y+bb1.getHeight())){
                            if(bb1.getBackground().equals(Color.black)){
                                if((x>b1x)&&(x<b1x+bb1.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b1y-1) &&(y<b1y+bb1.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb1.setBackground(Color.red);
                            }
                        }
                        if(bb1.getBackground().equals(Color.red)){
                            if( ((x>=b1x)&&(x<=b1x+bb1.getWidth())) &&(y+b1.getHeight()>=b1y+2) &&(y<=b1y+bb1.getHeight()-2)){
                                if((x>b1x)&&(x<b1x+bb1.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b1y-1) &&(y<b1y+bb1.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                            count++;
                            score+=50;                          
                            bb1.setContentAreaFilled(false);
                            bb1.setOpaque(false);
                            }
                        }                      
                    }
                                      
                    if(bb2.isOpaque()==true){                       
                        if( ((x>=b2x)&&(x<=b2x+bb2.getWidth())) &&(y+b1.getHeight()>=b2y) &&(y<=b2y+bb2.getHeight())){
                            if(bb2.getBackground().equals(Color.black)){
                                if((x>b2x)&&(x<b2x+bb2.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b2y-1) &&(y<b2y+bb2.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb2.setBackground(Color.red);
                            }
                        }
                        if(bb2.getBackground().equals(Color.red)){
                            if( ((x>=b2x)&&(x<=b2x+bb2.getWidth())) &&(y+b1.getHeight()>=b2y+2) &&(y<=b2y+bb2.getHeight()-2)){
                                if((x>b2x)&&(x<b2x+bb2.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b2y-1) &&(y<b2y+bb2.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb2.setContentAreaFilled(false);
                                bb2.setOpaque(false);
                            }                       
                        }
                    }
                    
                    if(bb3.isOpaque()==true){                        
                        if( ((x>=b3x)&&(x<=b3x+bb3.getWidth())) &&(y+b1.getHeight()>=b3y) &&(y<=b3y+bb3.getHeight())){
                            if(bb3.getBackground().equals(Color.black)){
                                if((x>b3x)&&(x<b3x+bb3.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b3y-1) &&(y<b3y+bb3.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb3.setBackground(Color.red);
                            }
                        }
                        if(bb3.getBackground().equals(Color.red)){
                            if( ((x>=b3x)&&(x<=b3x+bb3.getWidth())) &&(y+b1.getHeight()>=b3y+2) &&(y<=b3y+bb3.getHeight()-2)){
                                if((x>b3x)&&(x<b3x+bb3.getWidth())){
                                        if(y2==-y1)
                                            y2=y1;
                                        else if(y2==y1)
                                            y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b3y-1) &&(y<b3y+bb3.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                            count++;
                            score+=50;
                            bb3.setContentAreaFilled(false);
                            bb3.setOpaque(false);
                            }                       
                        }
                    }
                    
                    if(bb4.isOpaque()==true){                        
                        if( ((x>=b4x)&&(x<=b4x+bb4.getWidth())) &&(y+b1.getHeight()>=b4y) &&(y<=b4y+bb4.getHeight())){
                            if(bb4.getBackground().equals(Color.black)){
                                if((x>b4x)&&(x<b4x+bb4.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b4y-1) &&(y<b4y+bb4.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb4.setBackground(Color.red);
                            }
                        }
                        if(bb4.getBackground().equals(Color.red)){
                            if( ((x>=b4x)&&(x<=b4x+bb4.getWidth())) &&(y+b1.getHeight()>=b4y+2) &&(y<=b4y+bb4.getHeight()-2)){
                                if((x>b4x)&&(x<b4x+bb4.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b4y-1) &&(y<b4y+bb4.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb4.setContentAreaFilled(false);
                                bb4.setOpaque(false);
                            }                       
                        }
                    }
                    
                    if(bb5.isOpaque()==true){
                        if( ((x>=b5x)&&(x<=b5x+bb5.getWidth())) &&(y+b1.getHeight()>=b5y) &&(y<=b5y+bb5.getHeight())){
                            if(bb5.getBackground().equals(Color.black)){
                                if((x>b5x)&&(x<b5x+bb5.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b5y-1) &&(y<b5y+bb5.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb5.setBackground(Color.red);
                            }
                        }
                        if(bb5.getBackground().equals(Color.red)){
                            if( ((x>=b5x)&&(x<=b5x+bb5.getWidth())) &&(y+b1.getHeight()>=b5y+2) &&(y<=b5y+bb5.getHeight()-2)){
                                if((x>b5x)&&(x<b5x+bb5.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b5y-1) &&(y<b5y+bb5.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb5.setContentAreaFilled(false);
                                bb5.setOpaque(false);
                            }
                        }
                    }                                     
                }
                
                if(level == 3){
                    
                    m1.setVisible(true);
                    m2.setVisible(true);
                    m3.setVisible(true);
                    
                    if( (x>=m1x)&&(x<=m1x+m1.getWidth())&&(y+b1.getHeight()>=m1y)&&(y+b1.getHeight()<=m1y+m1.getHeight())){
                        if((x>m1x)&&(x<m1x+m1.getWidth())){
                            if(y2==-y1)
                                y2=y1;
                            else if(y2==y1)
                                y2=-y1;     
                        }
                        else if((y+b1.getHeight()>m1y-1) &&(y<m1y+m1.getHeight()+1)){
                            if(x1>0)
                                x2=x1;
                            if(x1<0)
                                x2=x1;
                        }
                    }
                    if( (x>=m2x)&&(x<=m2x+m2.getWidth())&&(y+b1.getHeight()>=m2y)&&(y+b1.getHeight()<=m2y+m2.getHeight())){
                        if((x>m2x)&&(x<m2x+m2.getWidth())){
                            if(y2==-y1)
                                y2=y1;
                            else if(y2==y1)
                                y2=-y1;     
                        }
                        else if((y+b1.getHeight()>m2y-1) &&(y<m2y+m2.getHeight()+1)){
                            if(x1>0)
                                x2=x1;
                            if(x1<0)
                                x2=x1;
                        }
                    }
                    if( (x>=m3x)&&(x<=m3x+m3.getWidth())&&(y+b1.getHeight()>=m3y)&&(y+b1.getHeight()<=m3y+m3.getHeight())){
                        if((x>m3x)&&(x<m3x+m3.getWidth())){
                            if(y2==-y1)
                                y2=y1;
                            else if(y2==y1)
                                y2=-y1;     
                        }
                        else if((y+b1.getHeight()>m3y-1) &&(y<m3y+m3.getHeight()+1)){
                            if(x1>0)
                                x2=x1;
                            if(x1<0)
                                x2=x1;
                        }
                    }
                    
                    if(bb1.isOpaque()==true){                                     
                        if( ((x>=b1x)&&(x<=b1x+bb1.getWidth())) &&(y+b1.getHeight()>=b1y) &&(y<=b1y+bb1.getHeight())){
                            if(bb1.getBackground().equals(Color.black)){
                                if((x>b1x)&&(x<b1x+bb1.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b1y-1) &&(y<b1y+bb1.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb1.setBackground(Color.red);
                            }
                        }
                        if(bb1.getBackground().equals(Color.red)){
                            if( ((x>=b1x)&&(x<=b1x+bb1.getWidth())) &&(y+b1.getHeight()>=b1y+2) &&(y<=b1y+bb1.getHeight()-2)){
                                if((x>b1x)&&(x<b1x+bb1.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b1y-1) &&(y<b1y+bb1.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                            count++;
                            score+=50;
                            bb1.setContentAreaFilled(false);
                            bb1.setOpaque(false);
                            }
                        }                      
                    }
                                      
                    if(bb2.isOpaque()==true){                       
                        if( ((x>=b2x)&&(x<=b2x+bb2.getWidth())) &&(y+b1.getHeight()>=b2y) &&(y<=b2y+bb2.getHeight())){
                            if(bb2.getBackground().equals(Color.black)){
                                if((x>b2x)&&(x<b2x+bb2.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b2y-1) &&(y<b2y+bb2.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb2.setBackground(Color.red);
                            }
                        }
                        if(bb2.getBackground().equals(Color.red)){
                            if( ((x>=b2x)&&(x<=b2x+bb2.getWidth())) &&(y+b1.getHeight()>=b2y+2) &&(y<=b2y+bb2.getHeight()-2)){
                                if((x>b2x)&&(x<b2x+bb2.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b2y-1) &&(y<b2y+bb2.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb2.setContentAreaFilled(false);
                                bb2.setOpaque(false);
                            }                       
                        }
                    }
                    
                    if(bb3.isOpaque()==true){                        
                        if( ((x>=b3x)&&(x<=b3x+bb3.getWidth())) &&(y+b1.getHeight()>=b3y) &&(y<=b3y+bb3.getHeight())){
                            if(bb3.getBackground().equals(Color.black)){
                                if((x>b3x)&&(x<b3x+bb3.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b3y-1) &&(y<b3y+bb3.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb3.setBackground(Color.red);
                            }
                        }
                        if(bb3.getBackground().equals(Color.red)){
                            if( ((x>=b3x)&&(x<=b3x+bb3.getWidth())) &&(y+b1.getHeight()>=b3y+2) &&(y<=b3y+bb3.getHeight()-2)){
                                if((x>b3x)&&(x<b3x+bb3.getWidth())){
                                        if(y2==-y1)
                                            y2=y1;
                                        else if(y2==y1)
                                            y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b3y-1) &&(y<b3y+bb3.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                            count++;
                            score+=50;
                            bb3.setContentAreaFilled(false);
                            bb3.setOpaque(false);
                            }                       
                        }
                    }
                    
                    if(bb4.isOpaque()==true){                        
                        if( ((x>=b4x)&&(x<=b4x+bb4.getWidth())) &&(y+b1.getHeight()>=b4y) &&(y<=b4y+bb4.getHeight())){
                            if(bb4.getBackground().equals(Color.black)){
                                if((x>b4x)&&(x<b4x+bb4.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b4y-1) &&(y<b4y+bb4.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb4.setBackground(Color.red);
                            }
                        }
                        if(bb4.getBackground().equals(Color.red)){
                            if( ((x>=b4x)&&(x<=b4x+bb4.getWidth())) &&(y+b1.getHeight()>=b4y+2) &&(y<=b4y+bb4.getHeight()-2)){
                                if((x>b4x)&&(x<b4x+bb4.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b4y-1) &&(y<b4y+bb4.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;                            
                                bb4.setContentAreaFilled(false);
                                bb4.setOpaque(false);
                            }                       
                        }
                    }
                    
                    if(bb5.isOpaque()==true){
                        if( ((x>=b5x)&&(x<=b5x+bb5.getWidth())) &&(y+b1.getHeight()>=b5y) &&(y<=b5y+bb5.getHeight())){
                            if(bb5.getBackground().equals(Color.black)){
                                if((x>b5x)&&(x<b5x+bb5.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b5y-1) &&(y<b5y+bb5.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb5.setBackground(Color.red);
                            }
                        }
                        if(bb5.getBackground().equals(Color.red)){
                            if( ((x>=b5x)&&(x<=b5x+bb5.getWidth())) &&(y+b1.getHeight()>=b5y+2) &&(y<=b5y+bb5.getHeight()-2)){
                                if((x>b5x)&&(x<b5x+bb5.getWidth())){
                                    if(y2==-y1)
                                        y2=y1;
                                    else if(y2==y1)
                                        y2=-y1;     
                                }
                                else if((y+b1.getHeight()>b5y-1) &&(y<b5y+bb5.getHeight()+1)){
                                    if(x1>0)
                                        x2=-x1;
                                    if(x1<0)
                                        x2=-x1;
                                }
                                count++;
                                score+=50;
                                bb5.setContentAreaFilled(false);
                                bb5.setOpaque(false);
                            }
                        }
                    }
                }
                
                if(pu1.isEnabled() == true){
                    if( (p1x>=xs) && (p1x<=xs+s1) &&  (p1y<=ys+25) && (p1y>=ys)){
                        s1 = 83;
                        b2.setSize(s1, b2.getHeight());
                        if( (p1x>=xs) && (p1x<=xs+s1) &&  (p1y==ys+25) ){
                            score+=50;
                        }
//                        p1.stop();
                        pu1.setLocation(p1x, p1y);
                        pu1.setVisible(false);                   
                    }
                }

                t1.setText("Lives left : "+ life+ "    Score : "+ score);

                if(life!=0){
                    if(count==5){
                        level = 2;
                        JOptionPane.showMessageDialog(null, "level 2");
                        t.stop();
                                         
                        b1.setEnabled(true);
                        b2.setEnabled(true);
                        bb1.setContentAreaFilled(true);
                        bb1.setOpaque(true);              
                        bb2.setContentAreaFilled(true);
                        bb2.setOpaque(true);
                        bb3.setContentAreaFilled(true);
                        bb3.setOpaque(true);
                        bb4.setContentAreaFilled(true);
                        bb4.setOpaque(true);
                        bb5.setContentAreaFilled(true);
                        bb5.setOpaque(true);

                        bb1.setBackground(Color.black);
                        bb2.setBackground(Color.black);
                        bb3.setBackground(Color.black);
                        bb4.setBackground(Color.black);
                        bb5.setBackground(Color.black);

                        xs = 225;
                        ys = 5;
                        x = xs;
                        y = ys + 20;
                        b1.setLocation(x,y);
                        xs = 225-(s1/2);
                        b2.setLocation(xs,ys);
                        b2.setSize(s1,b2.getHeight());
                        y1 = 1;
                        xx1 = i.nextInt(8)+0;
                        x1 = xx[xx1];
                        y2 = y1;
                        
                        speed = 10;
                        count = 6; 
                    
                    }
                    if(count==16){
                        level = 3;
                        JOptionPane.showMessageDialog(null, "level 3");
                        t.stop();
                        
                        b1.setEnabled(true);
                        b2.setEnabled(true);
                        bb1.setContentAreaFilled(true);
                        bb1.setOpaque(true);              
                        bb2.setContentAreaFilled(true);
                        bb2.setOpaque(true);
                        bb3.setContentAreaFilled(true);
                        bb3.setOpaque(true);
                        bb4.setContentAreaFilled(true);
                        bb4.setOpaque(true);
                        bb5.setContentAreaFilled(true);
                        bb5.setOpaque(true);

                        bb1.setBackground(Color.black);
                        bb2.setBackground(Color.black);
                        bb3.setBackground(Color.black);
                        bb4.setBackground(Color.black);
                        bb5.setBackground(Color.black);
                                               
                        xs = 225;
                        ys = 5;
                        x = xs;
                        y = ys + 20;
                        b1.setLocation(x,y);
                        xs = 225-(s1/2);
                        b2.setLocation(xs,ys);
                        b2.setSize(s1,b2.getHeight());
                        y1 = 1;
                        xx1 = i.nextInt(8)+0;
                        x1 = xx[xx1];
                        y2 = y1;
                        
                        speed = 10;
                        count = 17;
                    }
                    if(count==27){
                        t.stop();
                        name = JOptionPane.showInputDialog(null, "You Win!!"+"\n"+"ENter your name");
                        JOptionPane.showMessageDialog(null, "Score:"+"\n"+name+" - "+score);
                        reset.setEnabled(true);
                        JOptionPane.showMessageDialog(null,"If you want to play again,"+"\n"+"press the reset button"+"\n"+"\n"+"If you want to quit,"+"\n"+"press Q on your keyboard"+"\n"+"\n"+"If you want to go to the login page,"+"\n"+"press L on your keyboard");
                        count = 28;
                    }                                         
                }               
            }                      
        };

t = new Timer(500, action);        
t.setDelay(speed);
t.setRepeats(true);
t.start();

    }//GEN-LAST:event_b2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"level 1");
        b2.setLocation(xs,ys);
        pu1.setVisible(false);
        reset.setEnabled(false);
              
        b1y=380;b2y=380;b3y=380;b4y=380;b5y=380;
        bb1.setVisible(false);
        bb2.setVisible(false);
        bb3.setVisible(false);
        bb4.setVisible(false);      
        bb5.setVisible(false);       
        m1.setVisible(false);
        m2.setVisible(false);
        m3.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowActivated

    private void bb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bb2ActionPerformed

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseDragged

    private void b2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_b2KeyPressed
        // TODO add your handling code here:
        b2.setLocation(xs,ys);
        int keyCode = evt.getKeyCode();
        if(keyCode == evt.VK_LEFT){
            setXdirection(-2);
        }
        if(keyCode == evt.VK_RIGHT){
            setXdirection(+2);
        }
        if(keyCode == evt.VK_Q){
            if(count==28)
                System.exit(0);
        }
        if(keyCode == evt.VK_L){
            if(count==28){
                LoginPage lp = new LoginPage();
                lp.setVisible(true);
            }
        }
    }//GEN-LAST:event_b2KeyPressed

    private void b2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_b2KeyReleased
        // TODO add your handling code here:
        b2.setLocation(xs,ys);
        int keyCode = evt.getKeyCode();
        if(keyCode == evt.VK_LEFT){
            setXdirection(0);
        }
        if(keyCode == evt.VK_RIGHT){
            setXdirection(0);
        }
    }//GEN-LAST:event_b2KeyReleased
Timer p1;
    private void pu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pu1ActionPerformed
        // TODO add your handling code here:
        ActionListener powerup1;
        powerup1 = new ActionListener(){
            
            @Override
            public void actionPerformed(ActionEvent p1){
                pu1.setLocation(p1x,p1y);
                p1y-=5;
            }
        };
        p1 = new Timer(500, powerup1);
        p1.setDelay(50);
        p1.setRepeats(true);
        p1.start();
    }//GEN-LAST:event_pu1ActionPerformed

    private void t1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t1ActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        s1 = 55;
        xs = 225;
        ys = 5;
        x = xs;
        y = ys + 20;
        b1.setLocation(x,y);
        xs = 225-(s1/2);
        b2.setLocation(xs,ys);
        b2.setSize(s1,b2.getHeight());
        life = 3;
        score = 0;
        count = 0;
        level = 1;
        speed = 10;
        y1 = 2;
        xx1 = i.nextInt(8)+0;
        x1 = xx[xx1];
        y2 = y1;
        t.addActionListener(action);
        p1x = 200;
        p1y = 420;
        pu1.setLocation(p1x,p1y);
        t1.setText("Lives left : "+ 3+ "    Score : "+ 0);
        
        b1.setEnabled(true);
        b2.setEnabled(true);
        bb1.setContentAreaFilled(true);
        bb1.setOpaque(true);
        bb2.setContentAreaFilled(true);
        bb2.setOpaque(true);
        bb3.setContentAreaFilled(true);
        bb3.setOpaque(true);
        bb4.setContentAreaFilled(true);
        bb4.setOpaque(true);
        bb5.setContentAreaFilled(true);
        bb5.setOpaque(true);
        
        bb1.setBackground(Color.red);
        bb2.setBackground(Color.red);
        bb3.setBackground(Color.red);
        bb4.setBackground(Color.red);
        bb5.setBackground(Color.red);
        pu1.setVisible(false);
        
        m1.setVisible(false);
        m2.setVisible(false);
        m3.setVisible(false);
        
        JOptionPane.showMessageDialog(this, "Level 1");
        reset.setEnabled(false);
    }//GEN-LAST:event_resetActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {    
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(game3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(game3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(game3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(game3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */              
        game3 jg = new game3();   
        Thread thread = new Thread(jg);
        thread.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    public javax.swing.JButton b2;
    private javax.swing.JButton bb1;
    private javax.swing.JButton bb2;
    private javax.swing.JButton bb3;
    private javax.swing.JButton bb4;
    private javax.swing.JButton bb5;
    private javax.swing.JLabel bgl3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JButton m1;
    private javax.swing.JButton m2;
    private javax.swing.JButton m3;
    private javax.swing.JButton pu1;
    private javax.swing.JButton reset;
    private javax.swing.JTextField t1;
    private javax.swing.JSeparator wall;
    // End of variables declaration//GEN-END:variables
}
